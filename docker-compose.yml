services:
  # Kasoowa API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kasoowa-api
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_started
    ports:
      - "${API_PORT:-8080}:8080"
    environment:
      - DATABASE_URL=postgres://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-kasoowa}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_here}
      - JWT_EXPIRY_HOURS=${JWT_EXPIRY_HOURS:-24}
      - REFRESH_EXPIRY_DAYS=${REFRESH_EXPIRY_DAYS:-30}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CLIENT_ID=${KAFKA_CLIENT_ID:-kasoowa-service}
      - KAFKA_GROUP_ID=${KAFKA_GROUP_ID:-kasoowa-consumers}
      - REDIS_URL=redis://redis:6379
      - RUST_LOG=${RUST_LOG:-info}
    networks:
      - kasoowa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Nginx for reverse proxy (development environment)
  nginx:
    image: nginx:1.25-alpine
    container_name: kasoowa-nginx
    restart: always
    depends_on:
      - api
      - grafana
      - pgadmin
      - kafka-ui
    ports:
      - "${NGINX_PORT:-8000}:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    networks:
      - kasoowa-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: kasoowa-postgres
    restart: always
    ports:
      - "${DB_PORT:-5433}:5432"  # Changed from 5432:5432 to avoid conflict
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-kasoowa}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - kasoowa-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: kasoowa-redis
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - kasoowa-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: kasoowa-zookeeper
    restart: always
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    ports:
      - "${ZOOKEEPER_PORT:-2181}:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    networks:
      - kasoowa-network

  # Kafka message broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kasoowa-kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT:-9092}:9092"
      - "${KAFKA_HOST_PORT:-29092}:29092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:${KAFKA_HOST_PORT:-29092}
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka-data:/var/lib/kafka/data
      - ./kafka-init.sh:/tmp/kafka-init.sh
    networks:
      - kasoowa-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      
  # Kafka initialization service
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kasoowa-kafka-init
    depends_on:
      - kafka
    volumes:
      - ./kafka-init.sh:/tmp/kafka-init.sh
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                        cub kafka-ready -b kafka:9092 1 30 && \
                        chmod +x /tmp/kafka-init.sh && \
                        /tmp/kafka-init.sh'"
    networks:
      - kasoowa-network

  # Kafka management UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kasoowa-kafka-ui
    restart: always
    depends_on:
      - kafka
    ports:
      - "${KAFKA_UI_PORT:-8090}:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=${KAFKA_CLUSTER_NAME:-kasoowa-kafka}
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - kasoowa-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:7.8
    container_name: kasoowa-pgadmin
    restart: always
    depends_on:
      - postgres
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@kasoowa.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - kasoowa-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: kasoowa-prometheus
    restart: always
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - kasoowa-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:10.2.2
    container_name: kasoowa-grafana
    restart: always
    depends_on:
      - prometheus
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - kasoowa-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  kasoowa-network:
    driver: bridge

volumes:
  postgres-data:
  zookeeper-data:
  zookeeper-log:
  kafka-data:
  pgadmin-data:
  redis-data:
  prometheus-data:
  grafana-data: